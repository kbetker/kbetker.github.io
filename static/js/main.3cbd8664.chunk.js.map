{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","titlesArray","useState","title","setTitle","opacity","setOpacity","count","waitAMoment","milliseconds","Promise","resolve","setTimeout","clearTitle","currTitle","a","length","tempTitle","slice","changeTitle","char","prev","useEffect","blink","setInterval","clearInterval","className","style","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAmGeA,MAhGf,WACE,IAAMC,EAAc,CACjB,wBACA,qBACA,iBACA,cACA,iBACA,aACA,iBACA,mBACA,wBAIH,EAA0BC,mBAASD,EAAY,IAA/C,mBAAOE,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEIC,EAAQ,EAGNC,EAAc,SAACC,GACnB,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,OAG9CI,EAAU,uCAAG,WAAOC,GAAP,eAAAC,EAAA,0DACVD,EAAUE,OADA,gCAETR,EAAY,IAFH,OAGXS,EAAYH,EAAUI,MAAM,EAAGJ,EAAUE,OAAS,GAEtDZ,EADAU,EAAYG,GAJG,sBAQjBL,WAAU,sBAAC,sBAAAG,EAAA,sDACTI,IADS,2CAER,KAVc,2CAAH,sDAeVA,EAAW,uCAAG,kCAAAJ,EAAA,sDACdD,EAAYb,EAAYM,GAC5BA,IAAUN,EAAYe,OAAS,EAAIT,EAAQ,EAAIA,IAF7B,cAGCO,GAHD,aAAAC,EAAA,kCAAAA,EAAA,6DAGPK,EAHO,iBAIVZ,EAAY,IAJF,OAKhBJ,GAAS,SAAAiB,GAAI,OAAIA,EAAOD,KALR,2QAQlBR,WAAU,sBAAC,sBAAAG,EAAA,sDACTF,EAAWC,GADF,2CAER,MAVe,gEAAH,qDA4CjB,OAtBAQ,qBAAU,WACRV,WAAU,sBAAC,sBAAAG,EAAA,sDACTF,EAAW,yBADF,2CAER,OACF,IAIHS,qBAAU,WACR,IAAIC,EAAQC,aAAY,WACN,IAAZnB,EACFC,EAAW,GACU,IAAZD,GACTC,EAAW,GAEbmB,cAAcF,KACb,OAEF,CAAClB,IAKF,qBAAKqB,UAAU,UAAf,SAEE,sBAAKA,UAAU,WAAf,UACE,sBAAKA,UAAU,cAAf,4BAA4C,sBAAMA,UAAU,iBAAhB,0BAA5C,OACA,sBAAKA,UAAU,cAAf,kBAAkC,sBAAMA,UAAU,iBAAhB,SAAkCvB,IAApE,IAAkF,sBAAMwB,MAAO,CAAEtB,QAAQ,GAAD,OAAKA,IAA3B,kBAClF,qBAAKqB,UAAU,wBAAf,gCChFOE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3cbd8664.chunk.js","sourcesContent":["import './App.css';\nimport { useEffect, useState } from 'react';\n\nfunction App() {\n  const titlesArray = [\n     \"a Fullstack Developer\",\n     \"a Graphic Designer\",\n     \"a Silly Father\",\n     \"an Animator\",\n     \"a Photographer\",\n     \"a Musician\",\n     \"a Videographer\",\n     \"a Dungeon Master\",\n     \"Seeking Employment!!\"\n    ]\n\n\n  const [title, setTitle] = useState(titlesArray[0])\n  const [opacity, setOpacity] = useState(1)\n\n  let count = 1;\n\n\n  const waitAMoment = (milliseconds) => {\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\n  }\n\n  const clearTitle = async (currTitle) => {\n    while (currTitle.length) {\n      await waitAMoment(30)\n      let tempTitle = currTitle.slice(0, currTitle.length - 1)\n      currTitle = tempTitle\n      setTitle(currTitle)\n    }\n\n    setTimeout(async () => {\n      changeTitle()\n    }, 500);\n\n  }\n\n\n  const changeTitle = async () => {\n    let currTitle = titlesArray[count];\n    count === titlesArray.length - 1 ? count = 0 : count++;\n    for (const char of currTitle) {\n      await waitAMoment(30)\n      setTitle(prev => prev + char)\n    }\n\n    setTimeout(async () => {\n      clearTitle(currTitle)\n    }, 2500);\n  }\n\n\n// const startTitles = () => {\n//   setTimeout(async () => {\n//     changeTitle()\n//     count === titlesArray.length - 1 ? count = 0 : count++;\n//   }, 1500);\n// }\n\n\n  useEffect(() => {\n    setTimeout(async () => {\n      clearTitle(\"a Fullstack Developer\")\n    }, 3000);\n  }, [])\n\n\n\n  useEffect(() => {\n    let blink = setInterval(() => {\n      if (opacity === 1) {\n        setOpacity(0)\n      } else if (opacity === 0) {\n        setOpacity(1)\n      }\n      clearInterval(blink)\n    }, 500)\n\n  }, [opacity])\n\n\n\n  return (\n    <div className=\"wrapper\">\n\n      <div className=\"homeText\">\n        <div className=\"homeText-el\">Hi, my name is <span className=\"highlightColor\">Kevin Betker</span>.</div>\n        <div className=\"homeText-el\">I am <span className=\"highlightColor\">{title}</span> <span style={{ opacity: `${opacity}` }}>|</span></div>\n        <div className=\"homeText-el reference\"> - name here</div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}